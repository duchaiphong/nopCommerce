@model DataTablesModel

@using System.Net;
@using System.Runtime.Serialization;
@using Nop.Web.Framework.Models.DataTables;


@functions
{
    string GetUrl(DataUrl dataUrl)
    {
        return !string.IsNullOrEmpty(dataUrl?.ActionName) && !string.IsNullOrEmpty(dataUrl.ControllerName)
            ? Url.Action(dataUrl.ActionName, dataUrl.ControllerName, dataUrl.RouteValues)
            : !string.IsNullOrEmpty(dataUrl.Url)
            ? $"{(dataUrl.Url.StartsWith("~/", StringComparison.Ordinal) ? Url.Content(dataUrl.Url) : dataUrl.Url).TrimEnd('/')}" + (!dataUrl.TrimEnd ? "/" : "")
            : string.Empty;
    }

    string GetEnumValue(Type type, object value)
    {
        return type.GetMember(value.ToString())?[0]
            ?.GetCustomAttributes(false).OfType<EnumMemberAttribute>().FirstOrDefault()
            ?.Value;
    }
}

<table class="table table-bordered table-hover dataTable" width="100%" id="@Model.Name"></table>

@{ 
    //check using MasterCheckBox
    var isUsedMasterCheckBox = Model.ColumnCollection.Any(x => x.IsMasterCheckBox == true);

    //Model name for js function names
    var model_name = Model.Name.Replace("-", "_");
}

<script>
    @if (isUsedMasterCheckBox)
    {
        //selectedIds - This variable will be used on views. It can not be renamed
        <text>
        var selectedIds = [];

        function updateMasterCheckbox() {
            var numChkBoxes = $('#@Model.Name input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]').length;
            var numChkBoxesChecked = $('#@Model.Name input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]:checked').length;
            $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
        }
        </text>
    }
    $(document).ready(function () {
        var table = $('#@Model.Name').DataTable({
             @await Html.PartialAsync("_Table.Definition", Model)
        });

        @if (!string.IsNullOrEmpty(Model.SearchButtonId))
        {
            <text>
            $('#@Model.SearchButtonId').click(function() {
                $('#@Model.Name').DataTable().ajax.reload();
                $('.checkboxGroups').attr('checked', false).change();
                selectedIds = [];
                return false;
            });
            </text>
        }
        @if (isUsedMasterCheckBox)
        {
            <text>
            $('#mastercheckbox').click(function () {
                $('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
            });

            $('#@Model.Name').on('change', 'input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]', function (e) {
                var $check = $(this);
                var checked = jQuery.inArray($check.val(), selectedIds);
                if ($check.is(':checked') == true) {
                    if (checked == -1) {
                        selectedIds.push($check.val());
                    }
                } else if (checked > -1) {
                    selectedIds = $.grep(selectedIds, function (item, index) {
                        return item != $check.val();
                    });
                }
                updateMasterCheckbox();
            });
            </text>
        }
    });
</script>
@if ((Model.UrlDelete != null) || (Model.ChildTable?.UrlDelete != null))
{
    <text>
    <script>
        function DeleteData_@(model_name)(DataId) {
            if (confirm('@T("Admin.Common.DeleteConfirmation")')) {
                ActionDelete_@(model_name)(DataId);
            }
            else {
                return false;
            }
        }

        function ActionDelete_@(model_name)(DataId) {
            var postData = {
                @if (!string.IsNullOrEmpty(Model.BindColumnNameActionDelete))
                {
                    <text>
                    @Model.BindColumnNameActionDelete: DataId
                    </text>
                }
                else
                {
                    <text>
                    id: DataId
                    </text>
                }
            };
            addAntiForgeryToken(postData);

            $.ajax({
                url: '@Html.Raw(GetUrl((Model.ChildTable?.UrlDelete != null) ? Model.ChildTable?.UrlDelete : Model.UrlDelete))',
                type: '@WebRequestMethods.Http.Post',
                dataType: 'json',
                data: postData,
                success: function () {
                    $('#@Model.Name').DataTable().draw(false);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert(thrownError);
                }
            });
        }
    </script>
    </text>
}

@if ((Model.UrlUpdate != null) || (Model.ChildTable?.UrlUpdate != null))
{
    <text>
    <script>
        var editIndexTable_@(model_name) = -1;
        var EditRowData_@(model_name) = [];
        var ColumnData_@(model_name) = [];
        @foreach(var column in Model.ColumnCollection.Where(x => x.Editable == true))
        {
            <text>
                var obj = { 'Data': '@column.Data', 'Editable': @column.Editable.ToString().ToLower(), 'Type': '@column.TypeEditing' }
                ColumnData_@(model_name).push(obj);
            </text>
        }
console.log(ColumnData_@(model_name), "ColumnData_@(model_name)");
        //------------------EDIT---------------------------------
        function EditData_@(model_name)(DataId) {
            RoweditMode(DataId);
        }

        function RoweditMode(rowid) {
console.log(rowid, "rowID");
            var prevRow;
            var rowIndexVlaue = parseInt(rowid[0].rowIndex);
            if (editIndexTable_@(model_name) == -1) {
                saveRowIntoArray(rowid);
                rowid.attr("editState", "editState");
                editIndexTable_@(model_name) = rowid.rowIndex;
console.log(rowid.rowIndex, "rowid.rowIndex");
                setEditStateValue(rowid, rowIndexVlaue);
            }
            else {
                prevRow = $("[editState=editState]");
                prevRow.attr("editState", "");
                rowid.attr("editState", "editState");
                editIndexTable_@(model_name) = rowIndexVlaue;
                saveArrayIntoRow(prevRow);
                saveRowIntoArray(rowid);
                setEditStateValue(rowid, rowIndexVlaue);
            }
        }

        function setEditStateValue(td1, indexRow) {
console.log(td1, "td1");
console.log(EditRowData_@(model_name), "EditRowData_@(model_name)");

            for (var k in EditRowData_@(model_name)) {
console.log(k, "k");
                var columnType = 'string';

                $.each(ColumnData_@(model_name), function (index, element) {
                    if (element.Data == k) {
                        columnType = element.Type;
                    }
                });

console.log(EditRowData_@(model_name)[k], "EditRowData_@(model_name)[k]");

                if (columnType == 'number') {
                    $($(td1).children('.' + k)[0]).html('<input value="' + EditRowData_@(model_name)[k] + '" class="userinput" type="number" min="0" max="100"/>');
                }
                if (columnType == 'checkbox') {
                    $($(td1).children('.' + k)[0]).html('<input value="' + EditRowData_@(model_name)[k] + '" class="userinput" type="checkbox" onclick="checkBoxClick(this)"/>');
                }
                if (columnType == 'string') {
                    $($(td1).children('.' + k)[0]).html('<input value="' + EditRowData_@(model_name)[k] + '" class="userinput"  style="width: 99% " />');

                }
            }
        }

        function checkBoxClick(checkBox) {
            var input = $(checkBox);

            if ($(input).val() === 'true') {
                $(input).val('false');
                $(input).removeAttr('checked');
            } else {
                $(input).val('true');
                $(input).attr('checked', 'checked');
            }

console.log($(checkBox));
        }
        //------------------EDIT---------------------------------

        //----------------------CONFIRM--------------------
        function ConfirmEditData_@(model_name)(DataId) {
            updateRowData(DataId);
        }

        function updateRowData(currentCells) {
            var table = $("#dtexample").DataTable();
            var row = table.row(currentCells);

console.log(currentCells, "currentCells");

            rowid = currentCells.getAttribute('id');
            var UpdateRowData = [];

            $.each(ColumnData_@(model_name), function (index, element) {
                if (element.Editable == true) {
                    UpdateRowData.push({
                        'pname': element.Name, 'pvalue': $($($(currentCells).children('.' + element.Name)).children('input')[0]).val()
                    });
                }
            });
console.log(UpdateRowData);
            UpdateRowData.push({ 'pname': 'Id', 'pvalue': rowid });
            var parameter = "";
            var DataId = "";
            var postData = {};

            for (i = 0; i < UpdateRowData.length; i++) {

                postData[UpdateRowData[i].pname] = UpdateRowData[i].pvalue;
            }

            //filters
            //postData['CategoryId'] = Model.Id;
            //postData['ProductId'] = 20;

            var tokenInput = $('input[name=__RequestVerificationToken]').val();
            postData['__RequestVerificationToken'] = tokenInput;

            addAntiForgeryToken(postData);

            $.ajax({
                url: '@Html.Raw(GetUrl((Model.ChildTable?.UrlUpdate != null) ? Model.ChildTable?.UrlUpdate : Model.UrlUpdate))',
                type: 'POST',
                dataType: 'json',
                data: postData,
                success: function (data) {
                    @*$('#@Model.Name').DataTable().ajax.reload();*@
                     $('#@Model.Name').DataTable().draw(false);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert(thrownError);
                }
            });
        }
        //----------------------CONFIRM--------------------

        //---------------------CANCEL EDIT--------------------
        function CancelEditData_@(model_name)(DataId) {
            var prevRow = $("[editState=editState]");
            prevRow.attr("editState", "");
            if (prevRow.length > 0) { saveArrayIntoRow($(prevRow)); }
            editIndexTable_@(model_name) = -1;
        }
        //---------------------CANCEL EDIT--------------------

        //----------------------Utilites----------------------------
        function saveArrayIntoRow(cureentCells) {
            for (var k in EditRowData_@(model_name)) {
                $($(cureentCells).children('.' + k)[0]).html(EditRowData_@(model_name)[k]);
            }
        }

        function saveRowIntoArray(cureentCells) {
            $.each(ColumnData_@(model_name), function (index, element) {
                if (element.Editable == true) {
                    var htmlVal = $($(cureentCells).children('.' + element.Data)[0]).html();
                    EditRowData_@(model_name)[element.Data] = htmlVal;
                }
            });
        }
        //----------------------Utilites----------------------------


    </script>
    </text>
}

@if (Model.ChildTable != null)
{
    <text>
    <script>
        function getchild_@(model_name)(d) {
            return '<table id="child' + d.Id + '" class="table table-bordered table-hover dataTable" width="100%" style="padding-left:2%;"></table>';
        }
        $(document).ready(function () {
            // Add event listener for opening and closing childs
            $('#@Model.Name tbody').on('click', 'td.child-control', function () {
                var tr = $(this).closest('tr');
                var tdi = tr.find('i.fa');
                var row = $('#@Model.Name').DataTable().row(tr);

                if (row.child.isShown()) {
                    // This row is already open - close it
                    row.child.hide();
                    tr.removeClass('shown');
                    tdi.first().removeClass('fa-caret-down');
                    tdi.first().addClass('fa-caret-right');
                }
                else {
                    // Open this row
                    row.child(getchild_@(model_name)(row.data())).show();
                    var classid = '#child' + row.data().Id;
                    $(classid).DataTable({
                    @await Html.PartialAsync("_Table.Definition", Model.ChildTable)
                    }).draw;
                    tr.addClass('shown');
                    tdi.first().removeClass('fa-caret-right');
                    tdi.first().addClass(' fa-caret-down');
                }
            });
        });
    </script>
    </text>
}
